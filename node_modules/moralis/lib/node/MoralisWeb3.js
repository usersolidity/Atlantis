"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EthereumEvents = void 0;

var _web = _interopRequireDefault(require("web3"));

var _ParseObject = _interopRequireDefault(require("./ParseObject"));

var _ParseQuery = _interopRequireDefault(require("./ParseQuery"));

var _ParseUser = _interopRequireDefault(require("./ParseUser"));

var _ParseACL = _interopRequireDefault(require("./ParseACL"));

var _MoralisErd = _interopRequireDefault(require("./MoralisErd"));

var _MoralisDot = _interopRequireDefault(require("./MoralisDot"));

var _MoralisWalletConnectProvider = _interopRequireDefault(require("./MoralisWalletConnectProvider"));

var _MoralisInjectedProvider = _interopRequireDefault(require("./MoralisInjectedProvider"));

var _Cloud = require("./Cloud");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
/* global window */


const EthereumEvents = {
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  ACCOUNTS_CHANGED: 'accountsChanged',
  CHAIN_CHANGED: 'chainChanged'
};
exports.EthereumEvents = EthereumEvents;
const WARNING = 'Non ethereum enabled browser';

function uniq(arr) {
  return arr.filter((v, i) => arr.indexOf(v) === i);
}

class MoralisWeb3 {
  constructor(...args) {
    const MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;
    return new MWeb3(...args);
  }

  static async enable(options) {
    const Web3Provider = MoralisWeb3.getWeb3Provider(options);
    const web3Provider = new Web3Provider();
    const web3 = await web3Provider.activate();
    this.activeWeb3Provider = web3Provider;
    return web3;
  }

  static isDotAuth(options) {
    switch (options === null || options === void 0 ? void 0 : options.type) {
      case 'dot':
      case 'polkadot':
      case 'kusama':
        return true;

      default:
        return false;
    }
  }

  static isElrondAuth(options) {
    switch (options === null || options === void 0 ? void 0 : options.type) {
      case 'erd':
      case 'elrond':
        return true;

      default:
        return false;
    }
  }

  static getWeb3Provider(options) {
    switch (options === null || options === void 0 ? void 0 : options.provider) {
      case 'walletconnect':
      case 'walletConnect':
      case 'wc':
        return _MoralisWalletConnectProvider.default;

      default:
        return _MoralisInjectedProvider.default;
    }
  }

  static async cleanup() {
    if (this.activeWeb3Provider) {
      await this.activeWeb3Provider.deactivate();
    } // Prevent a bug when there is stale data active


    _MoralisWalletConnectProvider.default.cleanupStaleData();
  }

  static async authenticate(options) {
    var _user$get;

    const isLoggedIn = await _ParseUser.default.current();

    if (isLoggedIn) {
      await _ParseUser.default.logOut();
    }

    await MoralisWeb3.cleanup();

    if (MoralisWeb3.isDotAuth(options)) {
      return _MoralisDot.default.authenticate(options);
    }

    if (MoralisWeb3.isElrondAuth(options)) {
      return _MoralisErd.default.authenticate(options);
    }

    const web3 = await MoralisWeb3.enable(options);
    const data = MoralisWeb3.getSigningData();
    const accounts = await web3.eth.getAccounts();
    const accountsLower = accounts.map(v => v.toLowerCase());
    const [ethAddress] = accountsLower;
    if (!ethAddress) throw new Error('Address not found');
    const signature = await web3.eth.personal.sign(data, ethAddress, '');
    if (!signature) throw new Error('Data not signed');
    const user = await _ParseUser.default.logInWith('moralisEth', {
      authData: {
        id: ethAddress,
        signature,
        data
      }
    });
    await user.setACL(new _ParseACL.default(user));
    if (!user) throw new Error('Could not get user');
    user.set('accounts', uniq([].concat(accountsLower, (_user$get = user.get('accounts')) !== null && _user$get !== void 0 ? _user$get : [])));
    user.set('ethAddress', ethAddress);
    await user.save(null, options);
    return user;
  }

  static async link(account, options) {
    var _user$get2;

    const web3 = await MoralisWeb3.enable();
    const data = MoralisWeb3.getSigningData();
    const user = await _ParseUser.default.current();
    const ethAddress = account.toLowerCase();

    const EthAddress = _ParseObject.default.extend('_EthAddress');

    const query = new _ParseQuery.default(EthAddress);
    const ethAddressRecord = await query.get(ethAddress).catch(() => null);

    if (!ethAddressRecord) {
      const signature = await web3.eth.personal.sign(data, account, '');
      await user.linkWith('moralisEth', {
        authData: {
          id: ethAddress,
          signature,
          data
        }
      });
    }

    user.set('accounts', uniq([ethAddress].concat((_user$get2 = user.get('accounts')) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
    user.set('ethAddress', ethAddress);
    await user.save(null, options);
    return user;
  }

  static async unlink(account) {
    var _user$get3;

    const accountsLower = account.toLowerCase();

    const EthAddress = _ParseObject.default.extend('_EthAddress');

    const query = new _ParseQuery.default(EthAddress);
    const ethAddressRecord = await query.get(accountsLower);
    await ethAddressRecord.destroy();
    const user = await _ParseUser.default.current();
    const accounts = (_user$get3 = user.get('accounts')) !== null && _user$get3 !== void 0 ? _user$get3 : [];
    const nextAccounts = accounts.filter(v => v !== accountsLower);
    user.set('accounts', nextAccounts);
    user.set('ethAddress', nextAccounts[0]);
    await user._unlinkFrom('moralisEth');
    await user.save();
    return user;
  }

  static async getAllERC20({
    chain,
    address
  } = {}) {
    const result = await (0, _Cloud.run)('getAllERC20', {
      chain,
      address
    });
    return result;
  }

  static async getERC20({
    chain,
    address,
    symbol,
    tokenAddress
  } = {}) {
    const result = (0, _Cloud.run)('getERC20', {
      chain,
      address,
      symbol,
      tokenAddress
    });
    return result;
  }

  static getNFTs({
    chain = 'Eth',
    address = ''
  } = {}) {
    return (0, _Cloud.run)('getNFTs', {
      chain,
      address
    });
  }

  static getNFTsCount({
    chain = 'Eth',
    address = ''
  } = {}) {
    return (0, _Cloud.run)('getNFTsCount', {
      chain,
      address
    });
  }

  static getTransactions({
    chain = 'Eth',
    address = '',
    order = 'desc'
  } = {}) {
    return (0, _Cloud.run)('getTransactions', {
      chain,
      address,
      order
    });
  }

  static getTransactionsCount({
    chain = 'Eth',
    address = ''
  } = {}) {
    return (0, _Cloud.run)('getTransactionsCount', {
      chain,
      address
    });
  }

  static on(eventName, cb) {
    const ethereum = window.ethereum;

    if (!ethereum || !ethereum.on) {
      console.warn(WARNING);
      return () => {
        console.warn(WARNING);
      };
    }

    ethereum.on(eventName, cb);
    return () => {
      console.warn('UNSUB NOT SUPPORTED');
    };
  }

  static getSigningData() {
    return `Moralis Authentication`;
  }

}

MoralisWeb3.onConnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CONNECT);
MoralisWeb3.onDisconnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.DISCONNECT);
MoralisWeb3.onChainChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CHAIN_CHANGED);
MoralisWeb3.onAccountsChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.ACCOUNTS_CHANGED);
var _default = MoralisWeb3;
exports.default = _default;