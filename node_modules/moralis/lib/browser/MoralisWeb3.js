"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = exports.EthereumEvents = void 0;

var _bind = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/bind"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/asyncToGenerator"));

var _construct2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/construct"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/createClass"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _filter = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/filter"));

var _web = _interopRequireDefault(require("web3"));

var _ParseObject = _interopRequireDefault(require("./ParseObject"));

var _ParseQuery = _interopRequireDefault(require("./ParseQuery"));

var _ParseUser = _interopRequireDefault(require("./ParseUser"));

var _ParseACL = _interopRequireDefault(require("./ParseACL"));

var _MoralisErd = _interopRequireDefault(require("./MoralisErd"));

var _MoralisDot = _interopRequireDefault(require("./MoralisDot"));

var _MoralisWalletConnectProvider = _interopRequireDefault(require("./MoralisWalletConnectProvider"));

var _MoralisInjectedProvider = _interopRequireDefault(require("./MoralisInjectedProvider"));

var _Cloud = require("./Cloud");

var _context10, _context11, _context12, _context13;

var EthereumEvents = {
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  ACCOUNTS_CHANGED: 'accountsChanged',
  CHAIN_CHANGED: 'chainChanged'
};
exports.EthereumEvents = EthereumEvents;
var WARNING = 'Non ethereum enabled browser';

function uniq(arr) {
  return (0, _filter.default)(arr).call(arr, function (v, i) {
    return (0, _indexOf.default)(arr).call(arr, v) === i;
  });
}

var MoralisWeb3 = /*#__PURE__*/function () {
  function MoralisWeb3() {
    (0, _classCallCheck2.default)(this, MoralisWeb3);
    var MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _construct2.default)(MWeb3, args);
  }

  (0, _createClass2.default)(MoralisWeb3, null, [{
    key: "enable",
    value: function () {
      var _enable = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options) {
        var Web3Provider, web3Provider, web3;
        return _regenerator.default.wrap(function (_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                Web3Provider = MoralisWeb3.getWeb3Provider(options);
                web3Provider = new Web3Provider();
                _context.next = 4;
                return web3Provider.activate();

              case 4:
                web3 = _context.sent;
                this.activeWeb3Provider = web3Provider;
                return _context.abrupt("return", web3);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function () {
        return _enable.apply(this, arguments);
      };
    }()
  }, {
    key: "isDotAuth",
    value: function (options) {
      switch (options === null || options === void 0 ? void 0 : options.type) {
        case 'dot':
        case 'polkadot':
        case 'kusama':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "isElrondAuth",
    value: function (options) {
      switch (options === null || options === void 0 ? void 0 : options.type) {
        case 'erd':
        case 'elrond':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "getWeb3Provider",
    value: function (options) {
      switch (options === null || options === void 0 ? void 0 : options.provider) {
        case 'walletconnect':
        case 'walletConnect':
        case 'wc':
          return _MoralisWalletConnectProvider.default;

        default:
          return _MoralisInjectedProvider.default;
      }
    }
  }, {
    key: "cleanup",
    value: function () {
      var _cleanup = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {
        return _regenerator.default.wrap(function (_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!this.activeWeb3Provider) {
                  _context2.next = 3;
                  break;
                }

                _context2.next = 3;
                return this.activeWeb3Provider.deactivate();

              case 3:
                // Prevent a bug when there is stale data active
                _MoralisWalletConnectProvider.default.cleanupStaleData();

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function () {
        return _cleanup.apply(this, arguments);
      };
    }()
  }, {
    key: "authenticate",
    value: function () {
      var _authenticate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options) {
        var _context3, _user$get;

        var isLoggedIn, web3, data, accounts, accountsLower, _accountsLower, ethAddress, signature, authData, user;

        return _regenerator.default.wrap(function (_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _ParseUser.default.current();

              case 2:
                isLoggedIn = _context4.sent;

                if (!isLoggedIn) {
                  _context4.next = 6;
                  break;
                }

                _context4.next = 6;
                return _ParseUser.default.logOut();

              case 6:
                _context4.next = 8;
                return MoralisWeb3.cleanup();

              case 8:
                if (!MoralisWeb3.isDotAuth(options)) {
                  _context4.next = 10;
                  break;
                }

                return _context4.abrupt("return", _MoralisDot.default.authenticate(options));

              case 10:
                if (!MoralisWeb3.isElrondAuth(options)) {
                  _context4.next = 12;
                  break;
                }

                return _context4.abrupt("return", _MoralisErd.default.authenticate(options));

              case 12:
                _context4.next = 14;
                return MoralisWeb3.enable(options);

              case 14:
                web3 = _context4.sent;
                data = MoralisWeb3.getSigningData();
                _context4.next = 18;
                return web3.eth.getAccounts();

              case 18:
                accounts = _context4.sent;
                accountsLower = (0, _map.default)(accounts).call(accounts, function (v) {
                  return v.toLowerCase();
                });
                _accountsLower = (0, _slicedToArray2.default)(accountsLower, 1), ethAddress = _accountsLower[0];

                if (ethAddress) {
                  _context4.next = 23;
                  break;
                }

                throw new Error('Address not found');

              case 23:
                _context4.next = 25;
                return web3.eth.personal.sign(data, ethAddress, '');

              case 25:
                signature = _context4.sent;

                if (signature) {
                  _context4.next = 28;
                  break;
                }

                throw new Error('Data not signed');

              case 28:
                authData = {
                  id: ethAddress,
                  signature: signature,
                  data: data
                };
                _context4.next = 31;
                return _ParseUser.default.logInWith('moralisEth', {
                  authData: authData
                });

              case 31:
                user = _context4.sent;
                _context4.next = 34;
                return user.setACL(new _ParseACL.default(user));

              case 34:
                if (user) {
                  _context4.next = 36;
                  break;
                }

                throw new Error('Could not get user');

              case 36:
                user.set('accounts', uniq((0, _concat.default)(_context3 = []).call(_context3, accountsLower, (_user$get = user.get('accounts')) !== null && _user$get !== void 0 ? _user$get : [])));
                user.set('ethAddress', ethAddress);
                _context4.next = 40;
                return user.save(null, options);

              case 40:
                return _context4.abrupt("return", user);

              case 41:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee3);
      }));

      return function () {
        return _authenticate.apply(this, arguments);
      };
    }()
  }, {
    key: "link",
    value: function () {
      var _link = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(account, options) {
        var _context5, _user$get2;

        var web3, data, user, ethAddress, EthAddress, query, ethAddressRecord, signature, authData;
        return _regenerator.default.wrap(function (_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return MoralisWeb3.enable();

              case 2:
                web3 = _context6.sent;
                data = MoralisWeb3.getSigningData();
                _context6.next = 6;
                return _ParseUser.default.current();

              case 6:
                user = _context6.sent;
                ethAddress = account.toLowerCase();
                EthAddress = _ParseObject.default.extend('_EthAddress');
                query = new _ParseQuery.default(EthAddress);
                _context6.next = 12;
                return query.get(ethAddress).catch(function () {
                  return null;
                });

              case 12:
                ethAddressRecord = _context6.sent;

                if (ethAddressRecord) {
                  _context6.next = 20;
                  break;
                }

                _context6.next = 16;
                return web3.eth.personal.sign(data, account, '');

              case 16:
                signature = _context6.sent;
                authData = {
                  id: ethAddress,
                  signature: signature,
                  data: data
                };
                _context6.next = 20;
                return user.linkWith('moralisEth', {
                  authData: authData
                });

              case 20:
                user.set('accounts', uniq((0, _concat.default)(_context5 = [ethAddress]).call(_context5, (_user$get2 = user.get('accounts')) !== null && _user$get2 !== void 0 ? _user$get2 : [])));
                user.set('ethAddress', ethAddress);
                _context6.next = 24;
                return user.save(null, options);

              case 24:
                return _context6.abrupt("return", user);

              case 25:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee4);
      }));

      return function () {
        return _link.apply(this, arguments);
      };
    }()
  }, {
    key: "unlink",
    value: function () {
      var _unlink = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(account) {
        var _user$get3;

        var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
        return _regenerator.default.wrap(function (_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                accountsLower = account.toLowerCase();
                EthAddress = _ParseObject.default.extend('_EthAddress');
                query = new _ParseQuery.default(EthAddress);
                _context7.next = 5;
                return query.get(accountsLower);

              case 5:
                ethAddressRecord = _context7.sent;
                _context7.next = 8;
                return ethAddressRecord.destroy();

              case 8:
                _context7.next = 10;
                return _ParseUser.default.current();

              case 10:
                user = _context7.sent;
                accounts = (_user$get3 = user.get('accounts')) !== null && _user$get3 !== void 0 ? _user$get3 : [];
                nextAccounts = (0, _filter.default)(accounts).call(accounts, function (v) {
                  return v !== accountsLower;
                });
                user.set('accounts', nextAccounts);
                user.set('ethAddress', nextAccounts[0]);
                _context7.next = 17;
                return user._unlinkFrom('moralisEth');

              case 17:
                _context7.next = 19;
                return user.save();

              case 19:
                return _context7.abrupt("return", user);

              case 20:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee5);
      }));

      return function () {
        return _unlink.apply(this, arguments);
      };
    }()
  }, {
    key: "getAllERC20",
    value: function () {
      var _getAllERC = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {
        var _ref,
            chain,
            address,
            result,
            _args6 = arguments;

        return _regenerator.default.wrap(function (_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _ref = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {}, chain = _ref.chain, address = _ref.address;
                _context8.next = 3;
                return (0, _Cloud.run)('getAllERC20', {
                  chain: chain,
                  address: address
                });

              case 3:
                result = _context8.sent;
                return _context8.abrupt("return", result);

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee6);
      }));

      return function () {
        return _getAllERC.apply(this, arguments);
      };
    }()
  }, {
    key: "getERC20",
    value: function () {
      var _getERC = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
        var _ref2,
            chain,
            address,
            symbol,
            tokenAddress,
            result,
            _args7 = arguments;

        return _regenerator.default.wrap(function (_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _ref2 = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {}, chain = _ref2.chain, address = _ref2.address, symbol = _ref2.symbol, tokenAddress = _ref2.tokenAddress;
                result = (0, _Cloud.run)('getERC20', {
                  chain: chain,
                  address: address,
                  symbol: symbol,
                  tokenAddress: tokenAddress
                });
                return _context9.abrupt("return", result);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee7);
      }));

      return function () {
        return _getERC.apply(this, arguments);
      };
    }()
  }, {
    key: "getNFTs",
    value: function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$chain = _ref3.chain,
          chain = _ref3$chain === void 0 ? 'Eth' : _ref3$chain,
          _ref3$address = _ref3.address,
          address = _ref3$address === void 0 ? '' : _ref3$address;

      return (0, _Cloud.run)('getNFTs', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getNFTsCount",
    value: function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$chain = _ref4.chain,
          chain = _ref4$chain === void 0 ? 'Eth' : _ref4$chain,
          _ref4$address = _ref4.address,
          address = _ref4$address === void 0 ? '' : _ref4$address;

      return (0, _Cloud.run)('getNFTsCount', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getTransactions",
    value: function () {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref5$chain = _ref5.chain,
          chain = _ref5$chain === void 0 ? 'Eth' : _ref5$chain,
          _ref5$address = _ref5.address,
          address = _ref5$address === void 0 ? '' : _ref5$address,
          _ref5$order = _ref5.order,
          order = _ref5$order === void 0 ? 'desc' : _ref5$order;

      return (0, _Cloud.run)('getTransactions', {
        chain: chain,
        address: address,
        order: order
      });
    }
  }, {
    key: "getTransactionsCount",
    value: function () {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$chain = _ref6.chain,
          chain = _ref6$chain === void 0 ? 'Eth' : _ref6$chain,
          _ref6$address = _ref6.address,
          address = _ref6$address === void 0 ? '' : _ref6$address;

      return (0, _Cloud.run)('getTransactionsCount', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "on",
    value: function (eventName, cb) {
      var ethereum = window.ethereum;

      if (!ethereum || !ethereum.on) {
        console.warn(WARNING);
        return function () {
          console.warn(WARNING);
        };
      }

      ethereum.on(eventName, cb);
      return function () {
        console.warn('UNSUB NOT SUPPORTED');
      };
    }
  }, {
    key: "getSigningData",
    value: function () {
      return "Moralis Authentication";
    }
  }]);
  return MoralisWeb3;
}();

MoralisWeb3.onConnect = (0, _bind.default)(_context10 = MoralisWeb3.on).call(_context10, MoralisWeb3, EthereumEvents.CONNECT);
MoralisWeb3.onDisconnect = (0, _bind.default)(_context11 = MoralisWeb3.on).call(_context11, MoralisWeb3, EthereumEvents.DISCONNECT);
MoralisWeb3.onChainChanged = (0, _bind.default)(_context12 = MoralisWeb3.on).call(_context12, MoralisWeb3, EthereumEvents.CHAIN_CHANGED);
MoralisWeb3.onAccountsChanged = (0, _bind.default)(_context13 = MoralisWeb3.on).call(_context13, MoralisWeb3, EthereumEvents.ACCOUNTS_CHANGED);
var _default = MoralisWeb3;
exports.default = _default;